name: 'CI Multiplatform Build'

on:
  push:
    paths-ignore:
      - '**.md'
    branches:
      - streamlabs
      - 'release/**'
    tags:
      - '*'
  pull_request:
    paths-ignore:
      - '**.md'
    branches:
      - streamlabs
      - 'release/**'

env:
  InstallPath: "packed_build"
  CEF_MAC_BUILD_VERSION: 4638
  MACOS_DEPS_VERSION: 2022-02-13
  VLC_VERSION: 3.0.8
  MIN_MACOS_VERSION: 10.13
  BUILD_DIRECTORY: "build"
  RELEASE_BUCKET: "obsstudios3"
  PACKAGE_NAME: "libobs"

jobs:
  macos64:
    name: 'macOS 64-bit'
    runs-on: [macos-latest]
    env:
      MIN_MACOS_VERSION: '10.13'
      MACOS_DEPS_VERSION: '2022-02-13'
      VLC_VERSION: '3.0.8'
      SPARKLE_VERSION: '1.23.0'
      QT_VERSION: '5.15.2'
      SIGN_IDENTITY: ''
      HAVE_CODESIGN_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY != '' && secrets.MACOS_SIGNING_CERT != '' }}
    steps:
      - name: Get Current Arch
        shell: bash
        id: get_arch
        run: echo "CURRENT_ARCH=$(uname -m)" >> $GITHUB_ENV
      - name: 'Checkout'
        uses: actions/checkout@v2.3.3
        with:
          submodules: 'recursive'
      - name: 'Fetch Git Tags'
        run: |
          git fetch --prune --unshallow
          echo "OBS_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "OBS_GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "OBS_GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: 'Check for Github Labels'
        if: github.event_name == 'pull_request'
        run: |
          LABELS_URL="$(echo ${{ github.event.pull_request.url }} | sed s'/pulls/issues/')"
          LABEL_FOUND="$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${LABELS_URL}/labels" | sed -n 's/.*"name": "\(.*\)",/\1/p' | grep 'Seeking Testers' || true)"
          if [ "${LABEL_FOUND}" = "Seeking Testers" ]; then
            echo "SEEKING_TESTERS=1" >> $GITHUB_ENV
          else
            echo "SEEKING_TESTERS=0" >> $GITHUB_ENV
          fi
      - name: 'Setup build environment (Homebrew + ENV)'
        shell: bash
        run: |
          if [ -d /usr/local/opt/openssl@1.0.2t ]; then
            brew uninstall openssl@1.0.2t
            brew untap local/openssl
          fi

          if [ -d /usr/local/opt/python@2.7.17 ]; then
            brew uninstall python@2.7.17
            brew untap local/python2
          fi

          if [ -d /usr/local/opt/speexdsp ]; then
            brew unlink speexdsp
          fi
          brew uninstall curl php composer
          brew bundle --file ./CI/scripts/macos/Brewfile
          echo "NPROC=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
      - name: 'Restore Chromium Embedded Framework from cache'
        id: cef-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'cef-cache'
        with:
          path: ${{ github.workspace }}/cmbuild/cef_binary_${{ env.MACOS_CEF_BUILD_VERSION }}_macos_x86_64
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.MACOS_CEF_BUILD_VERSION }}-1
      - name: 'Restore VLC dependency from cache'
        id: vlc-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'vlc-cache'
        with:
          path: ${{ github.workspace }}/cmbuild/vlc-${{ env.VLC_VERSION }}
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.VLC_VERSION }}
      - name: 'Restore Sparkle dependency from cache'
        id: sparkle-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'sparkle-cache'
        with:
          path: ${{ github.workspace }}/cmbuild/sparkle
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.SPARKLE_VERSION }}
      - name: 'Install prerequisite: Pre-built dependencies'
        if: steps.deps-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir /tmp/obsdeps
          curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/macos-deps-${{ env.MACOS_DEPS_VERSION }}-${{ env.CURRENT_ARCH }}.tar.xz
          tar -xf ./macos-deps-${{ env.MACOS_DEPS_VERSION }}-${{ env.CURRENT_ARCH }}.tar.xz -C "/tmp/obsdeps"
      - name: 'Install prerequisite: Pre-built dependency Qt'
        if: steps.deps-qt-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/macos-deps-qt-${{ env.MACOS_DEPS_VERSION }}-${{ env.CURRENT_ARCH }}.tar.xz
          tar -xf ./macos-deps-qt-${{ env.MACOS_DEPS_VERSION }}-${{ env.CURRENT_ARCH }}.tar.xz -C "/tmp/obsdeps"
          xattr -r -d com.apple.quarantine /tmp/obsdeps
      - name: 'Install prerequisite: VLC'
        if: steps.vlc-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L -O https://downloads.videolan.org/vlc/${{ env.VLC_VERSION }}/vlc-${{ env.VLC_VERSION }}.tar.xz
          if [ ! -d "${{ github.workspace }}/cmbuild" ]; then mkdir "${{ github.workspace }}/cmbuild"; fi
          tar -xf ./vlc-${{ env.VLC_VERSION }}.tar.xz -C "${{ github.workspace }}/cmbuild"
      - name: 'Install prerequisite: Sparkle'
        if: steps.sparkle-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L -o sparkle.tar.bz2 https://github.com/sparkle-project/Sparkle/releases/download/${{ env.SPARKLE_VERSION }}/Sparkle-${{ env.SPARKLE_VERSION }}.tar.bz2
          mkdir ${{ github.workspace }}/cmbuild/sparkle
          tar -xf ./sparkle.tar.bz2 -C ${{ github.workspace }}/cmbuild/sparkle
      - name: 'Setup prerequisite: Sparkle'
        shell: bash
        run: sudo cp -R ${{ github.workspace }}/cmbuild/sparkle/Sparkle.framework /Library/Frameworks/Sparkle.framework
      - name: 'Install prerequisite: Chromium Embedded Framework'
        if: steps.cef-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L -O https://cdn-fastly.obsproject.com/downloads/cef_binary_${{ env.MACOS_CEF_BUILD_VERSION }}_macos_x86_64.tar.xz
          tar -xf ./cef_binary_${{ env.MACOS_CEF_BUILD_VERSION }}_macos_x86_64.tar.xz -C ${{ github.workspace }}/cmbuild/
          cd ${{ github.workspace }}/cmbuild/cef_binary_${{ env.MACOS_CEF_BUILD_VERSION }}_macos_x86_64
          /usr/bin/sed -i '.orig' '/add_subdirectory(tests\/ceftests)/d' ./CMakeLists.txt
          /usr/bin/sed -i '.orig' s/\"10.9\"/\"${{ env.MIN_MACOS_VERSION }}\"/ ./cmake/cef_variables.cmake
          mkdir build && cd build
          cmake  -DCMAKE_CXX_FLAGS="-std=c++11 -stdlib=libc++ -Wno-deprecated-declarations" -DCMAKE_EXE_LINKER_FLAGS="-std=c++11 -stdlib=libc++" -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ env.MIN_MACOS_VERSION }}  ..
          make -j${NPROC:-4}
          mkdir libcef_dll
          cd ../../
      - name: 'Configure'
        shell: bash
        run: |
          mkdir ./build
          cd ./build
          LEGACY_BROWSER="$(test "${{ env.MACOS_CEF_BUILD_VERSION }}" -le 3770 && echo "ON" || echo "OFF")"
          cmake -DENABLE_UNIT_TESTS=YES -DENABLE_SPARKLE_UPDATER=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ env.MIN_MACOS_VERSION }} -DQTDIR="/tmp/obsdeps" -DSWIGDIR="/tmp/obsdeps" -DDepsPath="/tmp/obsdeps" -DVLCPath="${{ github.workspace }}/cmbuild/vlc-${{ env.VLC_VERSION }}" -DENABLE_VLC=ON -DBUILD_BROWSER=ON -DBROWSER_LEGACY=$LEGACY_BROWSER -DWITH_RTMPS=ON -DCEF_ROOT_DIR="${{ github.workspace }}/cmbuild/cef_binary_${{ env.MACOS_CEF_BUILD_VERSION }}_macos_x86_64" -DTWITCH_CLIENTID='${{ env.TWITCH_CLIENTID }}' -DTWITCH_HASH='${{ env.TWITCH_HASH }}' -DRESTREAM_CLIENTID='${{ env.RESTREAM_CLIENTID }}' -DRESTREAM_HASH='${{ env.RESTREAM_HASH }}' ..
      - name: 'Build'
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: make -j${NPROC:-4}
      - name: 'Test'
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: make CTEST_OUTPUT_ON_FAILURE=1 test
      - name: 'Install prerequisite: DMGbuild'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        shell: bash
        run: |
          pip3 install dmgbuild==1.5.2
      - name: 'Install Apple Developer Certificate'
        if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && env.HAVE_CODESIGN_IDENTITY == 'true'
        uses: apple-actions/import-codesign-certs@253ddeeac23f2bdad1646faac5c8c2832e800071
        with:
          p12-file-base64: ${{ secrets.MACOS_SIGNING_CERT }}
          p12-password: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD }}
      - name: 'Set Signing Identity'
        if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && env.HAVE_CODESIGN_IDENTITY == 'true'
        run: |
          echo "SIGN_IDENTITY=${{ secrets.MACOS_SIGNING_IDENTITY }}" >> $GITHUB_ENV
      - name: 'Create macOS application bundle'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: |
          if [ -d ./OBS.app ]; then rm -rf ./OBS.app; fi
          mkdir -p OBS.app/Contents/MacOS
          mkdir OBS.app/Contents/PlugIns
          mkdir OBS.app/Contents/Resources
          mkdir OBS.app/Contents/Frameworks

          cp rundir/RelWithDebInfo/bin/obs ./OBS.app/Contents/MacOS
          cp rundir/RelWithDebInfo/bin/obs-ffmpeg-mux ./OBS.app/Contents/MacOS
          if ! [ "${{ env.MACOS_CEF_BUILD_VERSION }}" -le 3770 ]; then
            cp -R "rundir/RelWithDebInfo/bin/OBS Helper.app" "./OBS.app/Contents/Frameworks/OBS Helper.app"
            cp -R "rundir/RelWithDebInfo/bin/OBS Helper (GPU).app" "./OBS.app/Contents/Frameworks/OBS Helper (GPU).app"
            cp -R "rundir/RelWithDebInfo/bin/OBS Helper (Plugin).app" "./OBS.app/Contents/Frameworks/OBS Helper (Plugin).app"
            cp -R "rundir/RelWithDebInfo/bin/OBS Helper (Renderer).app" "./OBS.app/Contents/Frameworks/OBS Helper (Renderer).app"
          fi
          cp rundir/RelWithDebInfo/bin/libobsglad.0.dylib ./OBS.app/Contents/MacOS
          cp -R rundir/RelWithDebInfo/data ./OBS.app/Contents/Resources
          cp ../CI/scripts/macos/app/AppIcon.icns ./OBS.app/Contents/Resources
          cp -R rundir/RelWithDebInfo/obs-plugins/ ./OBS.app/Contents/PlugIns
          cp ../CI/scripts/macos/app/Info.plist ./OBS.app/Contents

          if [ -d ./OBS.app/Contents/Resources/data/obs-scripting ]; then
            mv ./OBS.app/Contents/Resources/data/obs-scripting/obslua.so ./OBS.app/Contents/MacOS/
            mv ./OBS.app/Contents/Resources/data/obs-scripting/_obspython.so ./OBS.app/Contents/MacOS/
            mv ./OBS.app/Contents/Resources/data/obs-scripting/obspython.py ./OBS.app/Contents/Resources/
            rm -rf ./OBS.app/Contents/Resources/data/obs-scripting/
          fi

          /bin/cp -cpR /tmp/obsdeps/lib/*.dylib ./OBS.app/Contents/Frameworks

          BUNDLE_PLUGINS=(
            ./OBS.app/Contents/PlugIns/coreaudio-encoder.so
            ./OBS.app/Contents/PlugIns/decklink-ouput-ui.so
            ./OBS.app/Contents/PlugIns/decklink-captions.so
            ./OBS.app/Contents/PlugIns/frontend-tools.so
            ./OBS.app/Contents/PlugIns/image-source.so
            ./OBS.app/Contents/PlugIns/mac-avcapture.so
            ./OBS.app/Contents/PlugIns/mac-capture.so
            ./OBS.app/Contents/PlugIns/mac-decklink.so
            ./OBS.app/Contents/PlugIns/mac-syphon.so
            ./OBS.app/Contents/PlugIns/mac-vth264.so
            ./OBS.app/Contents/PlugIns/mac-virtualcam.so
            ./OBS.app/Contents/PlugIns/obs-browser.so
            ./OBS.app/Contents/PlugIns/obs-ffmpeg.so
            ./OBS.app/Contents/PlugIns/obs-filters.so
            ./OBS.app/Contents/PlugIns/obs-transitions.so
            ./OBS.app/Contents/PlugIns/obs-vst.so
            ./OBS.app/Contents/PlugIns/rtmp-services.so
            ./OBS.app/Contents/MacOS/obs-ffmpeg-mux
            ./OBS.app/Contents/MacOS/obslua.so
            ./OBS.app/Contents/MacOS/_obspython.so
            ./OBS.app/Contents/PlugIns/obs-x264.so
            ./OBS.app/Contents/PlugIns/text-freetype2.so
            ./OBS.app/Contents/PlugIns/obs-outputs.so
          )

          if ! [ "${{ env.MACOS_CEF_BUILD_VERSION }}" -le 3770 ]; then
          ../CI/scripts/macos/app/dylibBundler -cd -of -a ./OBS.app -q -f \
            -s ./OBS.app/Contents/MacOS \
            -s /tmp/obsdeps/lib \
            -s /tmp/obsdeps/lib/QtSvg.framework \
            -s /tmp/obsdeps/lib/QtXml.framework \
            -s /tmp/obsdeps/lib/QtNetwork.framework \
            -s /tmp/obsdeps/lib/QtCore.framework \
            -s /tmp/obsdeps/lib/QtGui.framework \
            -s /tmp/obsdeps/lib/QtWidgets.framework \
            -s /tmp/obsdeps/lib/QtDBus.framework \
            -s /tmp/obsdeps/lib/QtPrintSupport.framework \
            -s "${{ github.workspace }}/cmbuild/sparkle/Sparkle.framework" \
            -s ./rundir/RelWithDebInfo/bin \
            $(echo "${BUNDLE_PLUGINS[@]/#/-x }")
          else
          ../CI/scripts/macos/app/dylibBundler -cd -of -a ./OBS.app -q -f \
            -s ./OBS.app/Contents/MacOS \
            -s /tmp/obsdeps/lib \
            -s /tmp/obsdeps/lib/QtSvg.framework \
            -s /tmp/obsdeps/lib/QtXml.framework \
            -s /tmp/obsdeps/lib/QtNetwork.framework \
            -s /tmp/obsdeps/lib/QtCore.framework \
            -s /tmp/obsdeps/lib/QtGui.framework \
            -s /tmp/obsdeps/lib/QtWidgets.framework \
            -s /tmp/obsdeps/lib/QtDBus.framework \
            -s /tmp/obsdeps/lib/QtPrintSupport.framework \
            -s "${{ github.workspace }}/cmbuild/sparkle/Sparkle.framework" \
            -s ./rundir/RelWithDebInfo/bin \
            $(echo "${BUNDLE_PLUGINS[@]/#/-x }") \
            -x ./OBS.app/Contents/PlugIns/obs-browser-page
          fi

          mv ./libobs-opengl/libobs-opengl.so ./OBS.app/Contents/Frameworks

          cp -R "${{ github.workspace }}/cmbuild/cef_binary_${{ env.MACOS_CEF_BUILD_VERSION }}_macos_x86_64/Release/Chromium Embedded Framework.framework" ./OBS.app/Contents/Frameworks/
          chown -R $(whoami) ./OBS.app/Contents/Frameworks/

          cp ../CI/scripts/macos/app/OBSPublicDSAKey.pem ./OBS.app/Contents/Resources

          if [ "${GITHUB_REF:0:10}" = "refs/tags/" ]; then
            plutil -insert CFBundleVersion -string ${{ env.OBS_GIT_TAG }} ./OBS.app/Contents/Info.plist
            plutil -insert CFBundleShortVersionString -string ${{ env.OBS_GIT_TAG }} ./OBS.app/Contents/Info.plist
          else
            plutil -insert CFBundleVersion -string ${{ env.OBS_GIT_TAG }}-${{ env.OBS_GIT_HASH }} ./OBS.app/Contents/Info.plist
            plutil -insert CFBundleShortVersionString -string ${{ env.OBS_GIT_TAG }}-${{ env.OBS_GIT_HASH }} ./OBS.app/Contents/Info.plist
          fi

          plutil -insert OBSFeedsURL -string https://obsproject.com/osx_update/feeds.xml ./OBS.app/Contents/Info.plist
          plutil -insert SUFeedURL -string https://obsproject.com/osx_update/stable/updates.xml ./OBS.app/Contents/Info.plist
          plutil -insert SUPublicDSAKeyFile -string OBSPublicDSAKey.pem ./OBS.app/Contents/Info.plist

          codesign --force --options runtime --sign "${SIGN_IDENTITY:--}" "./OBS.app/Contents/Frameworks/Sparkle.framework/Versions/A/Resources/Autoupdate.app/Contents/MacOS/fileop"
          codesign --force --options runtime --sign "${SIGN_IDENTITY:--}" "./OBS.app/Contents/Frameworks/Sparkle.framework/Versions/A/Resources/Autoupdate.app/Contents/MacOS/Autoupdate"
          codesign --force --options runtime --sign "${SIGN_IDENTITY:--}" --deep ./OBS.app/Contents/Frameworks/Sparkle.framework

          codesign --force --options runtime --entitlements "../CI/scripts/macos/app/entitlements.plist" --sign "${SIGN_IDENTITY:--}" "./OBS.app/Contents/Frameworks/Chromium Embedded Framework.framework/Libraries/libEGL.dylib"
          codesign --force --options runtime --entitlements "../CI/scripts/macos/app/entitlements.plist" --sign "${SIGN_IDENTITY:--}" "./OBS.app/Contents/Frameworks/Chromium Embedded Framework.framework/Libraries/libswiftshader_libEGL.dylib"
          codesign --force --options runtime --entitlements "../CI/scripts/macos/app/entitlements.plist" --sign "${SIGN_IDENTITY:--}" "./OBS.app/Contents/Frameworks/Chromium Embedded Framework.framework/Libraries/libGLESv2.dylib"
          codesign --force --options runtime --entitlements "../CI/scripts/macos/app/entitlements.plist" --sign "${SIGN_IDENTITY:--}" "./OBS.app/Contents/Frameworks/Chromium Embedded Framework.framework/Libraries/libswiftshader_libGLESv2.dylib"
          if ! [ "${{ env.MACOS_CEF_BUILD_VERSION }}" -le 3770 ]; then
            codesign --force --options runtime --entitlements "../CI/scripts/macos/app/entitlements.plist" --sign "${SIGN_IDENTITY:--}" "./OBS.app/Contents/Frameworks/Chromium Embedded Framework.framework/Libraries/libvk_swiftshader.dylib"
          fi

          if ! [ "${{ env.MACOS_CEF_BUILD_VERSION }}" -le 3770 ]; then
            codesign --force --options runtime --entitlements "../CI/scripts/macos/helpers/helper-entitlements.plist" --sign "${SIGN_IDENTITY:--}" --deep "./OBS.app/Contents/Frameworks/OBS Helper.app"
            codesign --force --options runtime --entitlements "../CI/scripts/macos/helpers/helper-gpu-entitlements.plist" --sign "${SIGN_IDENTITY:--}" --deep "./OBS.app/Contents/Frameworks/OBS Helper (GPU).app"
            codesign --force --options runtime --entitlements "../CI/scripts/macos/helpers/helper-plugin-entitlements.plist" --sign "${SIGN_IDENTITY:--}" --deep "./OBS.app/Contents/Frameworks/OBS Helper (Plugin).app"
            codesign --force --options runtime --entitlements "../CI/scripts/macos/helpers/helper-renderer-entitlements.plist" --sign "${SIGN_IDENTITY:--}" --deep "./OBS.app/Contents/Frameworks/OBS Helper (Renderer).app"
          fi

          codesign --force --options runtime --deep --sign "${SIGN_IDENTITY:--}" "./OBS.app/Contents/Resources/data/obs-plugins/mac-virtualcam/obs-mac-virtualcam.plugin"

          codesign --force --options runtime --entitlements "../CI/scripts/macos/app/entitlements.plist" --sign "${SIGN_IDENTITY:--}" --deep ./OBS.app

          codesign -dvv ./OBS.app
      - name: 'Package'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: |
          FILE_DATE=$(date +%Y-%m-%d)
          FILE_NAME=$FILE_DATE-${{ env.OBS_GIT_HASH }}-${{ env.OBS_GIT_TAG }}-macOS.dmg
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV

          cp ../CI/scripts/macos/package/settings.json.template ./settings.json
          /usr/bin/sed -i '' 's#\$\$VERSION\$\$#${{ env.OBS_GIT_TAG }}#g' ./settings.json
          /usr/bin/sed -i '' 's#\$\$CI_PATH\$\$#../CI/scripts/macos#g' ./settings.json
          /usr/bin/sed -i '' 's#\$\$BUNDLE_PATH\$\$#${{ github.workspace }}/build#g' ./settings.json

          dmgbuild "OBS-Studio ${{ env.OBS_GIT_TAG }}" "${FILE_NAME}" -s ./settings.json
          mkdir ../nightly
          codesign --force --sign "${SIGN_IDENTITY:--}" ./"${FILE_NAME}"
          codesign -dvv ./"${FILE_NAME}"
          sudo cp ./${FILE_NAME} ../nightly/${FILE_NAME}
      - name: 'Publish'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        uses: actions/upload-artifact@v2.2.0
        with:
          name: '${{ env.FILE_NAME }}'
          path: ./nightly/*.dmg
      - name: 'Package Release'
        if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && env.HAVE_CODESIGN_IDENTITY == 'true'
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: |
          FILE_DATE=$(date +%Y-%m-%d)
          FILE_NAME=$FILE_DATE-${{ env.OBS_GIT_HASH }}-${{ env.OBS_GIT_TAG }}-macOS.dmg
          RELEASE_FILE_NAME=$FILE_DATE-${{ env.OBS_GIT_HASH }}-${{ env.OBS_GIT_TAG }}-rel-macOS.dmg
          echo "RELEASE_FILE_NAME=${RELEASE_FILE_NAME}" >> $GITHUB_ENV

          xcrun altool --store-password-in-keychain-item "AC_PASSWORD" -u "${{ secrets.MACOS_NOTARIZATION_USERNAME }}" -p "${{ secrets.MACOS_NOTARIZATION_PASSWORD }}"

          xcnotary precheck "./OBS.app"

          if [ "$?" -eq 0 ]; then
            xcnotary notarize "$FILE_NAME" --developer-account "${{ secrets.MACOS_NOTARIZATION_USERNAME }}" --developer-password-keychain-item "AC_PASSWORD" --provider "${{ secrets.ASC_PROVIDER_SHORTNAME }}"
          else
            return 1
          fi

          mkdir ../release
          sudo mv ./$FILE_NAME ../release/$RELEASE_FILE_NAME
      - name: 'Publish Release'
        if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && env.HAVE_CODESIGN_IDENTITY == 'true'
        uses: actions/upload-artifact@v2.2.0
        with:
          name: '${{ env.RELEASE_FILE_NAME }}'
          path: ./release/*.dmg
  win64:
    name: 'Windows 64-bit'
    runs-on: windows-2019
    strategy:
      matrix:
        ReleaseName: [release, debug]
        include:
        - ReleaseName: release
          BuildConfig: RelWithDebInfo
          CefBuildConfig: Release
        - ReleaseName: debug
          BuildConfig: Debug
          CefBuildConfig: Debug
    env:
      OS_TAG: "windows64"
    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash

      - name: Check cache for grpc 
        uses: actions/cache@v3
        with:
          path: ${{env.BUILD_DIRECTORY}}/grpc_dist
          key: ${{ runner.os }}-grpc-${{ hashFiles('slobs_CI\win-install-grpc.cmd') }}
      - name: Check cache for protobuf
        uses: actions/cache@v3
        with:
          path: ${{env.BUILD_DIRECTORY}}/protobuf_dist
          key: ${{ runner.os }}-grpc-${{ hashFiles('slobs_CI\win-install-protobuf.cmd') }}
      - name: Check cache for deps
        uses: actions/cache@v3
        with:
          path: ${{env.BUILD_DIRECTORY}}/deps
          key: ${{ runner.os }}-grpc-${{ hashFiles('slobs_CI\win-install-dependency.cmd') }}

      - name: Configure / Build 
        run: ./slobs_CI/win-build.cmd
        shell: cmd
        env:
          ReleaseName: ${{matrix.ReleaseName}}
          BuildConfig: ${{matrix.BuildConfig}}
          CefBuildConfig: ${{matrix.CefBuildConfig}}

      - name: Save cache for grpc 
        uses: actions/cache@v3
        with:
          path: ${{env.BUILD_DIRECTORY}}/grpc_dist
          key: ${{ runner.os }}-grpc-${{ hashFiles('slobs_CI\win-install-grpc.cmd') }}
      - name: Save cache for protobuf
        uses: actions/cache@v3
        with:
          path: ${{env.BUILD_DIRECTORY}}/protobuf_dist
          key: ${{ runner.os }}-grpc-${{ hashFiles('slobs_CI\win-install-protobuf.cmd') }}
      - name: Save cache for deps
        uses: actions/cache@v3
        with:
          path: ${{env.BUILD_DIRECTORY}}/deps
          key: ${{ runner.os }}-grpc-${{ hashFiles('slobs_CI\win-install-dependency.cmd') }}

      - name: Fetch symsrv-scripts
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          repository: stream-labs/symsrv-scripts
          path: symsrv-scripts
      - name: Run symbol server scripts
        run: ./symsrv-scripts/main.bat "${{ github.workspace }}/symsrv-scripts" ".\main.ps1 -localSourceDir '${{ github.workspace }}' -repo_userId 'stream-labs' -repo_name obs-studio' -repo_branch '${{ github.sha }}' -subModules 'plugins/enc-amf,stream-labs,obs-amd-encoder,streamlabs;plugins/motion-effect,stream-labs,motion-effect,master;plugins/obs-browser,stream-labs,obs-browser,streamlabs;plugins/obs-ndi,stream-labs,obs-ndi,streamlabs;plugins/obs-ndi,stream-labs,obs-amd-encoder,streamlabs;plugins/obs-openvr,stream-labs,OBS-OpenVR-Input-Plugin,master;plugins/obs-vst,stream-labs,obs-vst,streamlabs;plugins/slobs-virtual-cam,stream-labs,slobs-virtual-cam,streamlabs;plugins/win-dshow/libdshowcapture,stream-labs,libdshowcapture,streamlabs'"
        env:
          AWS_SYMB_ACCESS_KEY_ID: ${{secrets.AWS_SYMB_ACCESS_KEY_ID}}
          AWS_SYMB_SECRET_ACCESS_KEY: ${{secrets.AWS_SYMB_SECRET_ACCESS_KEY}}
        shell: powershell
      - name: Tar artifact for deployment
        run: tar -cvzf ${{env.TARGET_ARTIFACT}}.tar.gz -C ${{ github.workspace }} ${{env.InstallPath}}
        env:
          ARGET_ARTIFACT: ${{env.PACKAGE_NAME}}-${{env.OS_TAG}}-${{ steps.get_version.outputs.VERSION }}.7z
          INSTALL_DISTRIBUTE_PATH: "${{env.InstallPath}}"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_RELEASE_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_RELEASE_SECRET_ACCESS_KEY}}
          aws-region: us-west-2
      - name: Deploy
        run: aws s3 cp ${{env.TARGET_ARTIFACT}}.tar.gz s3://${{env.RELEASE_BUCKET}} --acl public-read
        env:
          TARGET_ARTIFACT: ${{env.PACKAGE_NAME}}-${{env.OS_TAG}}-${{ steps.get_version.outputs.VERSION }}.7z
